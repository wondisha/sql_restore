name: Restore Prod Backup to Dev

on:
  workflow_dispatch:
    inputs:
      backup_url:
        description: 'Full URL to the backup file (can include SAS token)'
        required: true
      target_database:
        description: 'Target database name in dev'
        required: true

jobs:
  restore:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug workspace
        shell: pwsh
        run: |
          Write-Host "GITHUB_WORKSPACE=$env:GITHUB_WORKSPACE"
          Write-Host "Current directory:"; Get-Location
          Write-Host "Listing root (first 200 lines):"
          Get-ChildItem -Path $env:GITHUB_WORKSPACE -Force -Recurse -ErrorAction SilentlyContinue | Select-Object FullName -First 200 | ForEach-Object { Write-Host $_.FullName }
          Write-Host "Listing scripts folder:"; if (Test-Path (Join-Path $env:GITHUB_WORKSPACE 'scripts')) { Get-ChildItem -Path (Join-Path $env:GITHUB_WORKSPACE 'scripts') -Force | ForEach-Object { Write-Host $_.FullName } } else { Write-Host 'scripts folder not found' }

      - name: Run restore script
        shell: pwsh
        env:
          SQL_AUTH_USER: ${{ secrets.SQL_AUTH_USER }}
          SQL_AUTH_PASSWORD: ${{ secrets.SQL_AUTH_PASSWORD }}
        run: |
          $backupUrl = "${{ github.event.inputs.backup_url }}"
          $targetDb = "${{ github.event.inputs.target_database }}"
          $instance = "localhost" # change to your dev instance or provide as secret/variable
          Write-Host "Restoring $backupUrl -> $instance::$targetDb"

          # Candidate script locations to support different repo layouts and runner working dirs
          $candidates = @(
            Join-Path $env:GITHUB_WORKSPACE 'scripts\restore-prod-to-dev.ps1',
            Join-Path $env:GITHUB_WORKSPACE 'restore-prod-to-dev.ps1',
            Join-Path (Get-Location) 'scripts\restore-prod-to-dev.ps1',
            Join-Path (Get-Location) 'restore-prod-to-dev.ps1'
          )

          $scriptPath = $null
          foreach ($p in $candidates) {
            Write-Host "Checking candidate: $p"
            if (Test-Path $p) { $scriptPath = $p; break }
          }

          if (-not $scriptPath) {
            Write-Error "Restore script not found in any of the candidate paths. Checked: $($candidates -join ', ')"
            exit 2
          }

          Write-Host "Using restore script: $scriptPath"
          & $scriptPath -BackupUrl $backupUrl -TargetSqlInstance $instance -TargetDatabaseName $targetDb -SqlAuthUser $env:SQL_AUTH_USER -SqlAuthPassword $env:SQL_AUTH_PASSWORD -ReplaceExisting
